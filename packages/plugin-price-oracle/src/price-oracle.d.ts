import { Plugin, PluginManager } from '@lumix/core';
import { PriceData, PriceSource, PriceOracleConfig, TokenPair, PriceSourceType } from './types';
export declare class PriceOraclePlugin implements Plugin {
    readonly metadata: PluginMetadata;
    isEnabled: boolean;
    isLoaded: boolean;
    private sources;
    private defaultSource;
    private minimumConfidence;
    private cache;
    private cacheDuration;
    private chainConfigs;
    private heliusClient?;
    private context?;
    private api?;
    private hooks?;
    private utils?;
    constructor(config?: PriceOracleConfig);
    onLoad(): Promise<void>;
    onUnload(): Promise<void>;
    onEnable(): Promise<void>;
    onDisable(): Promise<void>;
    onConfigChange(newConfig: PriceOracleConfig): Promise<void>;
    initialize(manager: PluginManager): Promise<void>;
    private handleNewBlock;
    private handleNewTransaction;
    getName(): string;
    addSource(source: PriceSource): void;
    removeSource(sourceName: PriceSourceType): void;
    getPrice(pair: TokenPair, sourceName?: PriceSourceType): Promise<PriceData>;
    getPriceFromAllSources(pair: TokenPair): Promise<PriceData[]>;
    getAggregatedPrice(pair: TokenPair): Promise<PriceData>;
    getAvailableSources(): PriceSourceType[];
    clearCache(): void;
    private getPreferredSource;
    private validatePriceData;
    private getSourceWeight;
    private calculateAggregatedConfidence;
}
